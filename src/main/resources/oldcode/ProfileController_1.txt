package com.security.controller;

import com.security.entity.User;
import com.security.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.Map;

@RestController
@RequestMapping("/api/profile")
public class ProfileController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @GetMapping
    public ResponseEntity<?> getProfile(Authentication auth) {
        String email = auth.getName();
        User user = (User) userRepository.findByEmail(email).orElseThrow(()-> new UsernameNotFoundException("User not found with email: " + email));
        return ResponseEntity.ok(Map.of(
                "username", user.getUsername(),
                "email", user.getEmail(),
                "role", user.getRole()
        ));
    }

    @PutMapping
    public ResponseEntity<?> updateProfile(Authentication auth, @RequestBody Map<String, String> body) {
        String email = auth.getName();
        User user = (User) userRepository.findByEmail(email).orElseThrow(()-> new UsernameNotFoundException("User not found with email: " + email));
        user.setUsername(body.get("username"));
        user.setEmail(body.get("email"));
        userRepository.save(user);
        return ResponseEntity.ok("Updated");
    }

    @PutMapping("/password")
    public ResponseEntity<?> changePassword(Authentication auth, @RequestBody Map<String, String> body) {
        String email = auth.getName();
        User user = (User) userRepository.findByEmail(email).orElseThrow(()-> new UsernameNotFoundException("User not found with email: " + email));
        if (!passwordEncoder.matches(body.get("oldPassword"), user.getPassword())) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Incorrect current password");
        }
        user.setPassword(passwordEncoder.encode(body.get("newPassword")));
        userRepository.save(user);
        return ResponseEntity.ok("Password updated");
    }

    @DeleteMapping
    public ResponseEntity<?> deleteAccount(Authentication auth) {
        String email = auth.getName();
        userRepository.deleteByEmail(email);
        return ResponseEntity.ok("Account deleted");
    }

    @PostMapping("/photo")
    public ResponseEntity<?> uploadPhoto(Authentication auth, @RequestParam("file") MultipartFile file) throws IOException {
        String email = auth.getName();
        User user = (User) userRepository.findByEmail(email).orElseThrow(()-> new UsernameNotFoundException("User not found with email: " + email));

        String filePath = "uploads/" + file.getOriginalFilename();
        file.transferTo(new File(filePath));
        user.setProfilePhoto(filePath);
        userRepository.save(user);

        return ResponseEntity.ok("Photo uploaded");
    }
}

